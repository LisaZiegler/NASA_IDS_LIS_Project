% script to plot the Salinity for the Blackwater region, initially
% some basic statistics

% B Clark sep 2015
%UMCES, HPL

%
% load('/Users/bclark/chesfvm-new/cpb/Water_Quality/Rhode_river/wq_forcing_work_RR/open_boundaries/wqm_vars_values_nodups.mat')
% load('/Users/bclark/chesfvm-new/cpb/Water_Quality/Rhode_river/wq_forcing_work_RR/open_boundaries/time_depth_interped_wqvars_cb3_3_cb4_2.mat')
matfilein = input('What is the full path and file name to the *.mat grid file? ---> ','s');
load(matfilein);
wqm_hisdir = input('What is full path to the WQM history directory? --->  ','s');
numfile=input('How many files do you want to plot salinity for? ---> ')
outdir = 'nutrient_plots';
ICM_int = input('What is the interval that the data was output at, in days?  ---> ')
% ncfilein = input('What is the full path and file name of the FVCOM nc file used to run the WQM? ---> ','s');
% nc=netcdf(ncfilein);
nameseg=input('What is the name segment for the FVCOM files ---> ','s');

CBP_struct = input('What is the full path and file name to the .mat file with the CBP data structure ---> ','s');
load(CBP_struct);


if(~exist(outdir));
    mkdir(outdir);    
end



% get the station indices by matching the CBP data coordinates 
% with the FVCOM grid coordinates

 stations_mod = dsearchn([lld_n(:,2) lld_n(:,3)],([stations.lon ; stations.lat])'); %find the model nodes that are close to the wqm station points

 tricolor(e2n(:,2:4),lld_n(:,2),lld_n(:,3), h_n);
 hold on
 
 for i = 1 : length(stations_mod);
    plot(lld_n(stations_mod(i),2),lld_n(stations_mod(i),3),'ro')
    text(lld_n(stations_mod(i),2),lld_n(stations_mod(i),3),stations(i).name,'fontsize',24)
    
 end
 
 saveas(gcf,'AllStations_map','png');
%%
% for istat = 1 : length(unique_stations);
%     
%     station_nodes(istat) = dsearchn(lld_n(:,2:3),unique_coords(istat,:));
%     plot(lld_n(station_nodes,2),lld_n(station_nodes,3),'bo','markersize',8,'markerfacecolor','k');
%      text(lld_n(station_nodes(istat),2),lld_n(station_nodes(istat),3),unique_stations(istat),'fontsize',20);
% end

%plot the stations to see where they are in the model domain

big_depth = [];
depth_out=[];
big_salt = [];
mod_time = [];


for idir = 1 : numfile;
    
    numfile_count = [1:numfile];
    
    kstr = num2str(numfile_count(idir),'%04d');
    
    fname = ['tonic','_',kstr,'.nc'];
    
    nc = netcdf([fname]);
    for istat = 1: length(stations_mod)
        mod_depth(:,istat) = nc{'dtfa'}(:,stations_mod(istat));
        mod_salt(:,:,istat) = nc{'salinity'}(:,:,stations_mod(istat));
        %sigma layers constant in time
        if(idir ==1)
            s_hybrid(:,istat) = nc{'s_hybrid'}(:,stations_mod(istat));
        end
        for i =1:24;
            depth_out(i,:,istat) = s_hybrid(2:end,istat)*mod_depth(i,istat);
        end
    end
    time = nc{'time'}(:);
    %set up a time array for plotting
    time_t = time./24/3600; %
    
    clear nc
    big_depth = [big_depth;depth_out];
    big_salt = [big_salt; mod_salt];
    mod_time = [mod_time; time_t];
    
end



%find the station locations;

%loop through each station and plot the salinity data
[ntimesteps,nlayers,nstats]=size(big_depth);
%%


rounded_mod_times=floor(mod_time);

for istat = 1 : length(stations_mod);
         myvar_id=[];
         ivar=0;
           while isempty(myvar_id)
            ivar=ivar+1;
              if(strcmp(stations(istat).variables(ivar).name,'SALINITY'))
                     myvar_id=ivar              ; % change this ID based on where the variable is located within the CBP data structure
                      % generated by read_cbp.m
              end
           end
    
    % pull out the data for this station
        [unique_dates,unique_ids]=unique(stations(istat).variables(myvar_id).date);             
      cbp_station_date= stations(istat).variables(myvar_id).date ; 
      cbp_station_value= stations(istat).variables(myvar_id).value ;
      cbp_station_depths=stations(istat).variables(myvar_id).depth;
    % now for each unique date, find corresponding values and take the
    
      % get the matching model times for statistics and plotting;   
       [matching_mod_times,ia,ib]=intersect(rounded_mod_times,unique_dates);   

       
           % now plot date by date
        figure;  
       X_out=[];
       Y_out=[];
       X_out_mean=[];
       Y_out_mean=[];
       unique_dates_out=[];
       
       subplot(2,2,[1,2]);
        contourf(repmat(mod_time,1,nlayers),big_depth(:,:,istat),big_salt(:,:,istat),'LineStyle','none') 
          hold on
          [cmin,cmax]=caxis;
          
            for iday=1:length(ib)
                
                % get the good day from the data back out so we can get
                % each value and depth
                myIds=find(cbp_station_date==unique_dates(ib(iday)));
                
                myDates=cbp_station_date(myIds);
                myDepths=cbp_station_depths(myIds);
                myvalues=cbp_station_value(myIds);
           
                % get rid of duplicates;
                [myUniqueDepths,Zids]=unique(myDepths);
                myUniqueValues=myvalues(Zids);
                myUniqueDates=unique(myDates);
               
                % now match up the model
                model_depthIds=dsearchn(big_depth(ia(iday),:,istat)',myUniqueDepths*-1)  ;
                modelDepths=big_depth(ia(iday),model_depthIds,istat);
                modelValues=mean(big_salt(find(rounded_mod_times==unique_dates(iday)),model_depthIds,istat),1);

                        for iplot=1:length(modelDepths);
                            scatter(myUniqueDates,modelDepths(iplot),100,myUniqueValues(iplot),'filled','markeredgecolor','k');
                       
                        end
                 
                         
                X_out=[X_out;myUniqueValues];
                Y_out=[Y_out;modelValues'];
                
                                % take the depth averaged quantity
                X_out_mean=[X_out_mean;mean(myUniqueValues)];
                Y_out_mean=[Y_out_mean;mean(modelValues)];
                                                                       
                unique_dates_out=[unique_dates_out;myUniqueDates];                

            end
            
         h= colorbar;
        caxis([cmin cmax])
        h.Label.String='SALT'       ;        
        [MEF,r,WMS,RMSE,MPE,RI,axis_min,axis_max]=model_statistics(X_out,Y_out)   ;     
        title([ 'Salt' , 'r =' num2str(r) ', RMSE = ' num2str(RMSE)   ' WMS = ' num2str(WMS)]);
        xlabel('Days in 2018','Fontsize',20);ylabel('Depth (m)','Fontsize',20)  ;
        
        subplot(2,2,3)
         plot(X_out,Y_out,'kd','markersize',8);
         axis([axis_min axis_max axis_min axis_max]);
         title([ 'SALT ' , '  MEF =' num2str(MEF),'r = ',num2str(r) ', RMSE = ' num2str(RMSE) , ' MPE = ',num2str(MPE)  ' WMS = ' num2str(WMS),'RI = ',num2str(RI)]);
         %xlabel('Observed Temp (C)','Fontsize',20);ylabel('Modeled Temp (C)','Fontsize',20);  
         xlabel('Observed Salt (PSU)','Fontsize',20);ylabel('Modeled Salt (PSU)','Fontsize',20); 
        subplot(2,2,4);
         histogram(Y_out,10,'normalization','probability');
         hold on
         histogram(X_out,10,'normalization','probability');
         legend('Modeled','Observed');
         %xlabel('Temp (C)','Fontsize',20);ylabel('Probability','fontsize',20)  
         xlabel('Salt (PSU)','Fontsize',20);ylabel('Probability','fontsize',20)
     mkdir(  ['station' num2str(istat)])
     
        saveas(gcf,['station' num2str(istat) '/SALT_depth' num2str(istat)],'png');
        %saveas(gcf,['station' num2str(istat) '/SALT_depth' num2str(istat)],'eps');     
        %saveas(gcf,['station' num2str(istat) '/SALT_depth' num2str(istat)],'fig');           
               
             figure;     % depth averaged
        
       [MEF,r,WMS,RMSE,MPE,RI,axis_min,axis_max]=model_statistics(X_out,Y_out)   ;    
  
     subplot(2,2,[1,2]);
     plot(mod_time,mean(big_salt(:,:,istat),2),'k-o');
     hold on
     plot(unique_dates_out,X_out_mean,'r-*');
         title([ 'Depth Averaged Salt ' , '  MEF =' num2str(MEF),'r = ',num2str(r) ', RMSE = ' num2str(RMSE) , ' MPE = ',num2str(MPE)  ' WMS = ' num2str(WMS),'RI = ',num2str(RI)]);
        xlabel('Days in 2018','Fontsize',20);ylabel('Salt (PSU)','Fontsize',20) 
        %xlabel('Days in 2018','Fontsize',20);ylabel('Temp (C)','Fontsize',20)
     legend('Modeled','Observed')
     subplot(2,2,3);
      plot(X_out_mean,Y_out_mean,'rd','markersize',10);
      axis([axis_min axis_max axis_min axis_max]);
      %xlabel('Observed Temp (C)','Fontsize',20);ylabel('Modeled Temp (C)','Fontsize',20)  ;
      xlabel('Observed Salt (PSU)','Fontsize',20);ylabel('Modeled Salinity (PSU)','Fontsize',20);
      
      subplot(2,2,4);
        histogram(Y_out_mean,10,'normalization','probability');
        hold on
        histogram(X_out_mean,10,'normalization','probability');
        legend('Modeled','Observed');
        %xlabel('Temperature (C)','Fontsize',20);ylabel('Probability','fontsize',20)        
         xlabel('Salt (PSU)','Fontsize',20);ylabel('Probability','fontsize',20)
        
        saveas(gcf,['station' num2str(istat) '/salt_depth_stats' num2str(istat)],'png');
        %saveas(gcf,['station' num2str(istat) '/salt_depth_stats' num2str(istat)],'eps');     
        %saveas(gcf,['station' num2str(istat) '/salt_depth_stats' num2str(istat)],'fig'); 
   
        %subplot(1,1,1)
        %plot(modelValues,myUniqueDepths, myUniqueValues, myUniqueDepths)
        %legend('model',['station' num2str(istat)])
        %set(gca,'XAxisLocation','top', 'ydir','reverse')
end

